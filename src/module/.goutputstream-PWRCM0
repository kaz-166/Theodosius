/* 2020/5/27 Written b]
 * written by kaz-166
 * gpio.c
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <errno.h>
#include "../common/typedef.h"
//#include "/opt/vc/include/bcm_host.h"

#define BASE_ADDR (unsigned int)0xFE000000	/* GPIO Register base address */
#define GPIO_BASE_REG_ADDR (unsigned int)0x00A00000	/* GPIO Register base address */
#define GPFSEL0_OFFSET (volatile unsigned int)0
#define GPFSEL1_OFFSET (volatile unsigned int)1
#define GPFSEL2_OFFSET (volatile unsigned int)2
#define GPFSEL3_OFFSET (volatile unsigned int)3
#define GPFSEL4_OFFSET (volatile unsigned int)4
#define GPFSEL5_OFFSET (volatile unsigned int)5
#define GPLEV0_OFFSET  (volatile unsigned int)0x0034
#define GPLEV1_OFFSET  (volatile unsigned int)0x0038
#define GPSET0_OFFSET  (volatile unsigned int)0x1c
#define GPSET1_OFFSET  (volatile unsigned int)0x20
#define GPPCR0_OFFSET (volatile unsigned int)0x00E4

#define GPFSEL0 *((volatile unsigned int*)(gpio + GPFSEL0_OFFSET))
#define GPFSEL1 *((volatile unsigned int*)(gpio + GPFSEL1_OFFSET))
#define GPFSEL2 *((volatile unsigned int*)(gpio + GPFSEL2_OFFSET))
#define GPFSEL3 *((volatile unsigned int*)(gpio + GPFSEL3_OFFSET))
#define GPFSEL4 *((volatile unsigned int*)(gpio + GPFSEL4_OFFSET))
#define GPFSEL5 *((volatile unsigned int*)(gpio + GPFSEL5_OFFSET))
#define GPLEV0  *((volatile unsigned int*)(gpio + GPLEV0_OFFSET))
#define GPLEV1  *((volatile unsigned int*)(gpio + GPLEV1_OFFSET))
#define GPSET0  *((volatile unsigned int*)(gpio + GPSET0_OFFSET))
#define GPSET1  *((volatile unsigned int*)(gpio + GPSET1_OFFSET))
#define GPPCR0  *((volatile unsigned int*)(gpio + GPPCR0_OFFSET))

#define BLOCK_SIZE 4096
#define PAGE_SIZE  4096


static volatile unsigned int gpio_mapping( int base_addr );

/* Global variables */

volatile unsigned int gpio;
static int mem_fd = 0;

void gpio_open( void )
{
	/* Mapping */    
	gpio = gpio_mapping(BASE_ADDR + GPIO_BASE_REG_ADDR);
} 

/* TODO: Moving to common module */
void common_inspect_virtual_arm_mems( void )
{	
	// Debug
	// Set GPIO5(pin29) OUTPUT Mode
	// GPFSEL0 = 0x00008000;
	
	printf("BASE ADDR:    %x\n", BASE_ADDR + GPIO_BASE_REG_ADDR);
	printf("mapped addr:  %x\n", gpio);
	
	for(int i = 0; i < 256; i = i+4)
	{
		printf("%x:  %x\n", GPIO_BASE_REG_ADDR+i, *((unsigned int*)(gpio + i)));
	}

}

level gpio_get_signal( unsigned int reg_number, unsigned int bit_number )
{
	unsigned int reg = 0x00000000;
	level ret = LOW;
	
	switch( reg_number )
	{
		/* GPLEV0 */
		case 0:
			reg = GPLEV0;
			break;
		/* GPLEV1 */
		case 1:
			reg = GPLEV1;
			break;
		/* Exception */
		default:
			perror("internal function error!!");
			break;
	}
	
	if( ( (reg) && (0x00000001 << bit_number) ) == 0 )
	{
		ret = LOW;
	}
	else
	{
		ret = HIGH;
	}

	return ret;
}

void gpio_set_signal( unsigned int reg_number, unsigned int bit_number, level l )
{
	unsigned int reg = 0x00000000;
	
	switch( reg_number )
	{
		/* GPSET0 */
		case 0:
			reg = GPSET0;
			break;
		/* GPSET1 */
		case 1:
			reg = GPSET1;
			break;
		/* Exception */
		default:
			perror("internal function error!!");
			break;
	}
	
	reg = reg | (0x00000001 << bit_number);
}

// @param  
// int base_addr: gpio register address
//
// @return
// static int gpio_map
static volatile unsigned int gpio_mapping( int base_addr )
{
		char *gpio_mem;
		unsigned int gpio_map;
		
		if( !mem_fd )
		{
			mem_fd = open("/dev/mem", O_RDWR|O_SYNC);
			if( mem_fd < 0 )
			{
				printf("Can't Opem /dev/mem \n");
				printf("ERRNO: %d\n", errno);
				exit(-1);
			}
		}
		
		gpio_mem = malloc(BLOCK_SIZE + (PAGE_SIZE - 1));
		if( gpio_mem == NULL )  
		{
			printf("Memory Allocation Error\n");
			exit(-1);
		}
		
		if( (unsigned long) gpio_mem % PAGE_SIZE )
		{
			gpio_mem += PAGE_SIZE - ((unsigned long)gpio_mem % PAGE_SIZE);
		}
		
		gpio_map = (unsigned int)mmap(NULL,
								BLOCK_SIZE,
								PROT_READ|PROT_WRITE,
								MAP_SHARED,
								mem_fd,
								base_addr);
		//if( (signed long)gpio_map < 0 )
		//{
		//	printf("mmap error\n");
		//	exit(-1);
		//}
		return (volatile unsigned int)gpio_map;
}
